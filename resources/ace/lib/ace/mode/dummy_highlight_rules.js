/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from ./templates/dummy.JSON-tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function (require, exports, module) {
    "use strict";

    var oop = require("../lib/oop");
    var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

    var DummyHighlightRules = function () {
        var aggr = ("#count|#sum|#max|#min|#int|#maxint");

        var keywordMapper = this.createKeywordMapper({
            "keyword": aggr
        }, "identifier", true);


        this.$rules = {
            "start": [{
                token: "keyword",
                regex: "not|\\:~"

            }, {
                token: "string",
                regex: "[a-z]+",
                next: "blocktag"
            }, {
                token: "text",
                regex: ",|:-",
                next: "start"
            }, {
                token: "keyword.operator",
                regex: "\\-|\\+|\\*|\\/|\\<|\\<=|\\>|\\>=|\\=|\\!="
            }, {
                token: "constant.numeric",
                regex: "[0-9]+"
            }, {
                token: "lparen",
                regex: "[[{]"
            }, {

                token: "rparen",
                regex: "[\\]}]"
            }, {
                token: keywordMapper,
                regex: "\\#[a-z]+"

            }, {
                token: "text",
                regex: "\s+"
            },
            {
                token: "comment",
                regex: "\%.+"

            }],
            "blocktag": [

                {
                    token: "keyword",
                    regex: "\\(",
                    next: "blocktagproperties"
                }
            ],
            "blocktagproperties": [{
                    token: "keyword",
                    regex: "\\)",
                    next: "start"
                }, {
                    token: "parameter",
                    regex: "[a-zA-Z0-9]+"
                }

            ]
        };


        this.normalizeRules();
    };

    DummyHighlightRules.metaData = {
        name: "Dummy",
        scopeName: "source.dummy",
        fileTypes: ["dummy"]
    };


    oop.inherits(DummyHighlightRules, TextHighlightRules);

    exports.DummyHighlightRules = DummyHighlightRules;
});